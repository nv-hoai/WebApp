@using FastFood.MVC.Models
@model FastFood.MVC.ViewModels.DashboardViewModel

@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<h2 class="mb-4">Dashboard</h2>

<!-- Summary Cards -->
<div class="row g-3 mb-4">
    <div class="col-md-3">
        <div class="card text-white bg-primary">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h5 class="card-title">Đơn hàng hôm nay</h5>
                        <h3>@Model.TodayOrdersCount</h3>
                    </div>
                    <div class="card-icon fs-2"><i class="fas fa-shopping-cart"></i></div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-white bg-success">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h5 class="card-title">Doanh thu</h5>
                        <h3>@Model.TotalRevenue.ToString("N0") 000 VND</h3>
                    </div>
                    <div class="card-icon fs-2"><i class="fas fa-money-bill"></i></div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-white bg-info">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h5 class="card-title">Khách mới</h5>
                        <h3>@Model.NewCustomersCount</h3>
                    </div>
                    <div class="card-icon fs-2"><i class="fas fa-user-plus"></i></div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-white bg-warning">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h5 class="card-title">Món bán chạy</h5>
                        <h6>@Model.TopSellingProductName</h6>
                    </div>
                    <div class="card-icon fs-2"><i class="fas fa-hamburger"></i></div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Chart -->
<div class="row mb-4">
    <div class="col-md-6 mx-auto">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Doanh thu 7 ngày qua</h5>
                <canvas id="revenueChart" height="150"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Recent Orders Table -->
<div class="card">
    <div class="card-body">
        <h5 class="card-title">Đơn hàng gần đây</h5>
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Mã Đơn</th>
                    <th>Khách hàng</th>
                    <th>Thời gian</th>
                    <th>Tổng tiền</th>
                    <th>Trạng thái</th>
                </tr>
            </thead>
            <tbody>
				@for (int i = 0; i < Model.RecentOrders.Count; i++)
				{
					var order = Model.RecentOrders[i];
					<tr>
						<td>@order.OrderID</td>
						<td>@order.CustomerName</td>
						<td>@order.OrderTime.ToString("hh:mm tt")</td>
						<td>@order.TotalAmount.ToString("N0") 000 VND</td>
						<td><span class="badge bg-@(order.Status ==  OrderStatus.Completed ? "success" : "warning")">@order.Status</span></td>
					</tr>
				}
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const ctx = document.getElementById('revenueChart').getContext('2d');
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: [@Html.Raw(string.Join(",", Model.Last7DaysRevenue.Select(d => $"'{d.Date.ToString("ddd")}'").ToArray()))],
                datasets: [{
                    label: 'Doanh thu (nghìn đồng)',
                    data: [@string.Join(",", Model.Last7DaysRevenue.Select(d => d.Revenue).ToArray())],
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    fill: true,
                    tension: 0.3
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value, index, values) {
                                return value.toLocaleString('vi-VN');
                            }
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                let label = context.dataset.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                if (context.parsed.y !== null) {
                                    label += new Intl.NumberFormat('vi-VN', {
                                        style: 'currency',
                                        currency: 'VND',
                                        maximumFractionDigits: 0
                                    }).format(context.parsed.y);
                                }
                                return label;
                            }
                        }
                    }
                }
            }
        });
    </script>
}

