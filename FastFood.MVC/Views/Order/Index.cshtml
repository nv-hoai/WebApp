@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@model IEnumerable<FastFood.MVC.Models.Order>
@using System.Globalization
@{
    var viCulture = CultureInfo.GetCultureInfo("vi-VN");
}

@if ((await AuthorizationService.AuthorizeAsync(User, "AdminOrEmployeeOrShipperAccess")).Succeeded)
{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    <h1 class="display-5 mb-4">Quản lý đơn hàng</h1>
    <hr />
    <div class="d-flex justify-content-between align-items-center mb-3">
        <form method="get" asp-action="Index" asp-controller="Order">
            <div class="d-flex align-items-center gap-3">
                <div class="input-group" style="width: 300px;">
                    <input type="text" class="form-control" placeholder="Tìm kiếm theo mã đơn hàng..." name="orderId" value="@Context.Request.Query["orderId"]">
                    <button class="btn btn-primary" type="submit">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
                <select asp-items="ViewBag.Status" class="form-select" name="status" style="width: 200px;">
                    <option value="">Tất cả trạng thái</option>
                </select>
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-filter"></i> Lọc
                </button>
            </div>
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Mã đơn hàng</th>
                            <th>Tổng tiền</th>
                            <th>Trạng thái</th>
                            <th>Thời gian tạo</th>
                            <th>Thời gian hoàn tất</th>
                            <th>Thao tác</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var item in Model)
                        {
                            <tr>
                                <td>@Html.DisplayFor(Model=>item.OrderID)</td>
                                <td>@Html.DisplayFor(Model => item.TotalCharge)</td>
                                <td>
                                    <span class="badge @GetStatusBadgeClass(item.Status)">@GetStatusDisplayName(item.Status)</span>
                                </td>
                                <td>@Html.DisplayFor(Model => item.CreatedAt)</td>
                                <td>@Html.DisplayFor(Model => item.CompletedAt)</td>
                                <td>
                                    <a asp-action="Details" asp-route-id="@item.OrderID" class="btn btn-info btn-sm">Xem</a>
                                    <a asp-action="Edit" asp-route-id="@item.OrderID" class="btn btn-warning btn-sm">Sửa</a>
                                    <a asp-action="Delete" asp-route-id="@item.OrderID" class="btn btn-danger btn-sm">Xóa</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </form>
    </div>
}
else
{
    Layout = "~/Views/Shared/_IdentityLayout.cshtml";

    <h1>Danh sách đơn hàng</h1>

    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Khách hàng</th>
                @if ((await AuthorizationService.AuthorizeAsync(User, "OrderManagementAccess")).Succeeded)
                {
                    <th>Nhân viên</th>
                    <th>Người giao</th>
                }
                <th>Địa chỉ</th>
                <th>Trạng thái</th>
                <th>Tổng tiền</th>
                <th>Ngày tạo</th>
                <th>Thao tác</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr class="order-row" data-order-id="@item.OrderID" data-order-status="@item.Status">
                    <td>@item.OrderID</td>
                    <td>@(item.Customer?.User?.FullName ?? "N/A")</td>
                    @if ((await AuthorizationService.AuthorizeAsync(User, "OrderManagementAccess")).Succeeded)
                    {
                        <td>@(item.Employee?.User?.FullName ?? "N/A")</td>
                        <td>@(item.Shipper?.User?.FullName ?? "N/A")</td>
                    }

                    <td>@item.Address</td>
                    <td>
                        <span class="badge @GetStatusBadgeClass(item.Status)">@GetStatusDisplayName(item.Status)</span>
                    </td>
                    <td>@(item.TotalCharge?.ToString("N0") ?? "0") VND</td>
                    <td>@item.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>
                        <a asp-action="Details" asp-route-id="@item.OrderID" class="btn btn-info btn-sm">
                            <i class="fa fa-info-circle"></i> Chi tiết
                        </a>

                        @if ((await AuthorizationService.AuthorizeAsync(User, "AdminOrEmployeeAccess")).Succeeded)
                        {
                            if (item.Status == OrderStatus.Pending)
                            {
                                <button class="btn btn-primary btn-sm btn-accept-order" data-id="@item.OrderID">
                                    <i class="fa fa-check"></i> Nhận đơn
                                </button>
                            }
                            else if (item.Status == OrderStatus.Processing)
                            {
                                <button class="btn btn-success btn-sm btn-mark-prepared" data-id="@item.OrderID">
                                    <i class="fa fa-utensils"></i> Đã chuẩn bị xong
                                </button>
                            }

                            if ((await AuthorizationService.AuthorizeAsync(User, "AdminAccess")).Succeeded)
                            {
                                <a asp-action="Edit" asp-route-id="@item.OrderID" class="btn btn-warning btn-sm">
                                    <i class="fa fa-edit"></i> Sửa
                                </a>
                            }

                            if (item.Status != OrderStatus.Completed && item.Status != OrderStatus.Cancelled)
                            {
                                <button class="btn btn-danger btn-sm btn-cancel-order" data-id="@item.OrderID">
                                    <i class="fa fa-times"></i> Hủy
                                </button>
                            }
                        }
                    
                        @if ((await AuthorizationService.AuthorizeAsync(User, "ShipperAccess")).Succeeded)
                        {
                            if (item.Status == OrderStatus.Prepared)
                            {
                                <button class="btn btn-primary btn-sm btn-accept-delivery" data-id="@item.OrderID">
                                    <i class="fa fa-truck"></i> Nhận giao hàng
                                </button>
                            }
                            else if (item.Status == OrderStatus.Delivering)
                            {
                                <button class="btn btn-success btn-sm btn-mark-delivered" data-id="@item.OrderID">
                                    <i class="fa fa-check-circle"></i> Đã giao
                                </button>
                            }
                        }
                    
                        @if (!(await AuthorizationService.AuthorizeAsync(User, "OrderManagementAccess")).Succeeded)
                        {
                            if (item.Status == OrderStatus.Pending)
                            {
                                <button class="btn btn-danger btn-sm btn-cancel-order" data-id="@item.OrderID">
                                    <i class="fa fa-times"></i> Hủy đơn
                                </button>
                            }
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<partial name="_CancelModalPartial" />

@section Scripts {
    @Html.AntiForgeryToken()
    <script>
        $(document).ready(function() {
            // Handle Accept Order button (Employee)
            $(".btn-accept-order").click(function() {
                var orderID = $(this).data("id");
                var token = $('input[name="__RequestVerificationToken"]').val();
                
                if (confirm("Bạn muốn nhận đơn hàng #" + orderID + "?")) {
                    $.ajax({
                        url: '@Url.Action("AcceptOrder")',
                        type: 'POST',
                        data: { 
                            orderID: orderID,
                            __RequestVerificationToken: token
                        },
                        success: function(result) {
                            if (result.success) {
                                alert(result.message);
                                location.reload();
                            } else {
                                alert(result.message);
                            }
                        },
                        error: function() {
                            alert("Có lỗi xảy ra. Vui lòng thử lại sau!");
                        }
                    });
                }
            });
            
            // Handle Mark as Prepared button (Employee)
            $(".btn-mark-prepared").click(function() {
                var orderID = $(this).data("id");
                var token = $('input[name="__RequestVerificationToken"]').val();
                
                if (confirm("Xác nhận đơn hàng #" + orderID + " đã được chuẩn bị xong?")) {
                    $.ajax({
                        url: '@Url.Action("MarkAsPrepared")',
                        type: 'POST',
                        data: {
                            orderID: orderID,
                            __RequestVerificationToken: token
                        },
                        success: function(result) {
                            if (result.success) {
                                alert(result.message);
                                location.reload();
                            } else {
                                alert(result.message);
                            }
                        },
                        error: function() {
                            alert("Có lỗi xảy ra. Vui lòng thử lại sau!");
                        }
                    });
                }
            });
            
            // Handle Accept Delivery button (Shipper)
            $(".btn-accept-delivery").click(function() {
                var orderID = $(this).data("id");
                var token = $('input[name="__RequestVerificationToken"]').val();
                
                if (confirm("Bạn muốn nhận giao đơn hàng #" + orderID + "?")) {
                    $.ajax({
                        url: '@Url.Action("AcceptDelivery")',
                        type: 'POST',
                        data: {
                            orderID: orderID,
                            __RequestVerificationToken: token
                        },
                        success: function(result) {
                            if (result.success) {
                                alert(result.message);
                                location.reload();
                            } else {
                                alert(result.message);
                            }
                        },
                        error: function() {
                            alert("Có lỗi xảy ra. Vui lòng thử lại sau!");
                        }
                    });
                }
            });
            
            // Handle Mark as Delivered button (Shipper)
            $(".btn-mark-delivered").click(function() {
                var orderID = $(this).data("id");
                var token = $('input[name="__RequestVerificationToken"]').val();
                
                if (confirm("Xác nhận đơn hàng #" + orderID + " đã được giao thành công?")) {
                    $.ajax({
                        url: '@Url.Action("MarkAsDelivered")',
                        type: 'POST',
                        data: {
                            orderID: orderID,
                            __RequestVerificationToken: token
                        },
                        success: function(result) {
                            if (result.success) {
                                alert(result.message);
                                location.reload();
                            } else {
                                alert(result.message);
                            }
                        },
                        error: function() {
                            alert("Có lỗi xảy ra. Vui lòng thử lại sau!");
                        }
                    });
                }
            });

            // Handle Cancel Order button - show modal
            $(".btn-cancel-order").click(function() {
                var orderID = $(this).data("id");
                $("#cancelOrderId").text(orderID);
                $("#cancellationReason").val("");
                $("#cancelOrderModal").modal('show');
            });

            // Handle Confirm Cancel Order button in modal
            $("#confirmCancelOrder").click(function() {
                var orderID = $("#cancelOrderId").text();
                var reason = $("#cancellationReason").val();
                var token = $('input[name="__RequestVerificationToken"]').val();

                if (!reason.trim()) {
                    alert("Vui lòng nhập lý do hủy đơn hàng!");
                    return;
                }

                $.ajax({
                    url: '@Url.Action("Cancel")',
                    type: 'POST',
                    data: {
                        orderID: orderID,
                        note: reason,
                        __RequestVerificationToken: token
                    },
                    success: function(result) {
                        if (result.success) {
                            alert(result.message);
                            $("#cancelOrderModal").modal('hide');
                            location.reload();
                        } else {
                            alert(result.message);
                        }
                    },
                    error: function() {
                        alert("Có lỗi xảy ra. Vui lòng thử lại sau!");
                    }
                });
            });
        });
    </script>
}

@functions {
    string GetStatusBadgeClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "bg-secondary",
            OrderStatus.Processing => "bg-info",
            OrderStatus.Prepared => "bg-primary", 
            OrderStatus.Delivering => "bg-warning",
            OrderStatus.Completed => "bg-success",
            OrderStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }
    
    string GetStatusDisplayName(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "Chờ xác nhận",
            OrderStatus.Processing => "Đang chế biến",
            OrderStatus.Prepared => "Sẵn sàng giao",
            OrderStatus.Delivering => "Đang giao hàng",
            OrderStatus.Completed => "Hoàn thành",
            OrderStatus.Cancelled => "Đã hủy",
            _ => status.ToString()
        };
    }
}
