@model FastFood.MVC.Models.Order
@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@{
    ViewData["Title"] = "Details";
    if ((await AuthorizationService.AuthorizeAsync(User, "OrderManagementAccess")).Succeeded)
    {
        Layout = "~/Views/Shared/_AdminLayout.cshtml";
    }
    else
    {
        Layout = "_Layout.cshtml";
    }
    var vi = CultureInfo.GetCultureInfo("vi-VN");
}

<h1>Chi tiết đơn hàng #@Model.OrderID</h1>

<div class="card mb-4">
    <div class="card-header">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Thông tin chung</h5>
            <span class="badge @GetStatusBadgeClass(Model.Status)">@GetStatusDisplayName(Model.Status)</span>
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <dl class="row">
                    <dt class="col-sm-4">Khách hàng:</dt>
                    <dd class="col-sm-8">@(Model.Customer?.User?.FullName ?? "N/A")</dd>

                    <dt class="col-sm-4">Địa chỉ:</dt>
                    <dd class="col-sm-8">@Model.Address</dd>

                    <dt class="col-sm-4">Phương thức vận chuyển:</dt>
                    <dd class="col-sm-8">@GetShippingMethodDisplayName(Model.ShippingMethod)</dd>

                    <dt class="col-sm-4">Phí vận chuyển:</dt>
                    <dd class="col-sm-8">@Model.ShippingFee.ToString("N0") VND</dd>
                </dl>
            </div>
            <div class="col-md-6">
                <dl class="row">
                    <dt class="col-sm-4">Ngày tạo đơn:</dt>
                    <dd class="col-sm-8">@Model.CreatedAt.ToString("dd/MM/yyyy HH:mm")</dd>

                    @if ((await AuthorizationService.AuthorizeAsync(User, "OrderManagementAccess")).Succeeded)
                    {
                        <dt class="col-sm-4">Nhân viên xử lý:</dt>
                        <dd class="col-sm-8">@(Model.Employee?.User?.FullName ?? "Chưa có")</dd>

                        <dt class="col-sm-4">Người giao hàng:</dt>
                        <dd class="col-sm-8">@(Model.Shipper?.User?.FullName ?? "Chưa có")</dd>
                    }
                    @if (Model.ProcessingAt.HasValue)
                    {
                        <dt class="col-sm-4">Ngày xác nhận đơn:</dt>
                        <dd class="col-sm-8">@Model.ProcessingAt.Value.ToString("dd/MM/yyyy HH:mm")</dd>
                    }
                    @if (Model.PreparedAt.HasValue)
                    {
                        <dt class="col-sm-4">Ngày hoàn tất chuẩn bị:</dt>
                        <dd class="col-sm-8">@Model.PreparedAt.Value.ToString("dd/MM/yyyy HH:mm")</dd>
                    }
                    @if (Model.DeliveringAt.HasValue)
                    {
                        <dt class="col-sm-4">Ngày được vận chuyển đi:</dt>
                        <dd class="col-sm-8">@Model.DeliveringAt.Value.ToString("dd/MM/yyyy HH:mm")</dd>
                    }
                    @if (Model.CancelledAt.HasValue)
                    {
                        <dt class="col-sm-4">Ngày hủy đơn:</dt>
                        <dd class="col-sm-8">@Model.CancelledAt.Value.ToString("dd/MM/yyyy HH:mm")</dd>
                    }
                    @if (Model.CompletedAt.HasValue)
                    {
                        <dt class="col-sm-4">Ngày hoàn thành:</dt>
                        <dd class="col-sm-8">@Model.CompletedAt.Value.ToString("dd/MM/yyyy HH:mm")</dd>
                    }
					@if (!string.IsNullOrEmpty(Model.Note))
                    {
						<dt class="col-sm-4">Ghi chú:</dt>
						<dd class="col-sm-8 text-danger">@Model.Note</dd>
					}
                </dl>
            </div>
        </div>
    </div>
</div>

@if ((await AuthorizationService.AuthorizeAsync(User, "AdminOrEmployeeAccess")).Succeeded)
{
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Khuyến mãi áp dụng</h5>
        </div>
        <div class="card-body">
            @{
                var usedPromotions = Model.OrderDetails
                .Where(od => od.PromotionID.HasValue)
                .Select(od => od.Promotion)
                .Distinct()
                .ToList();
            }

            @if (usedPromotions.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Tên khuyến mãi</th>
                                <th>Mô tả</th>
                                <th>Phần trăm giảm</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var promo in usedPromotions)
                            {
                                <tr>
                                    <td>@promo?.Name</td>
                                    <td>@promo?.Description</td>
                                    <td>@(promo?.DiscountPercent * 100)%</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-info">Không có khuyến mãi nào được áp dụng cho đơn hàng này.</div>
            }
        </div>
    </div>
}

<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">Sản phẩm</h5>
    </div>
    <div class="card-body">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Sản phẩm</th>
                    <th>Số lượng</th>
                    <th>Đơn giá</th>
                    <th>Giá sau khuyến mãi</th>
                    <th>Thành tiền</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.OrderDetails)
                {
                    <tr>
                        <td>@item.ProductName</td>
                        <td>@item.Quantity</td>
                        <td>@item.UnitPrice.ToString("N0") VND</td>
                        <td>@item.DiscountedPrice.ToString("N0") VND</td>
                        <td>@item.SubTotal.ToString("N0") VND</td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="4" class="text-end"><strong>Tổng tiền hàng:</strong></td>
                    <td>@Model.SubTotal.ToString("N0") VND</td>
                </tr>
                <tr>
                    <td colspan="4" class="text-end"><strong>Phí giao hàng:</strong></td>
                    <td>@Model.ShippingFee.ToString("N0") VND</td>
                </tr>
                <tr>
                    <td colspan="4" class="text-end"><strong>Tổng thanh toán:</strong></td>
                    <td><strong>@(Model.TotalCharge?.ToString("N0") ?? "0") VND</strong></td>
                </tr>
            </tfoot>
        </table>
    </div>
</div>

<div class="d-flex gap-2">
    <a asp-action="Index" class="btn btn-secondary">
        <i class="fa fa-arrow-left"></i> Quay lại
    </a>

    @if ((await AuthorizationService.AuthorizeAsync(User, "EmployeeAccess")).Succeeded)
    {
        if (Model.Status == OrderStatus.Pending)
        {
            <button class="btn btn-primary btn-accept-order" data-id="@Model.OrderID">
                <i class="fa fa-check"></i> Nhận đơn
            </button>
        }
        else if (Model.Status == OrderStatus.Processing)
        {
            <button class="btn btn-success btn-mark-prepared" data-id="@Model.OrderID">
                <i class="fa fa-utensils"></i> Đã chuẩn bị xong
            </button>
        }


        if (Model.Status != OrderStatus.Completed && Model.Status != OrderStatus.Cancelled)
        {
            <button class="btn btn-danger btn-cancel-order" data-id="@Model.OrderID">
                <i class="fa fa-times"></i> Hủy đơn
            </button>
        }
    }

    @if ((await AuthorizationService.AuthorizeAsync(User, "AdminAccess")).Succeeded)
    {
    <a asp-action="Edit" asp-route-id="@Model.OrderID" class="btn btn-warning">
        <i class="fa fa-edit"></i> Sửa
    </a>
    }
    
    @if ((await AuthorizationService.AuthorizeAsync(User, "ShipperAccess")).Succeeded)
    {
        if (Model.Status == OrderStatus.Prepared)
        {
            <button class="btn btn-primary btn-accept-delivery" data-id="@Model.OrderID">
                <i class="fa fa-truck"></i> Nhận giao hàng
            </button>
        }
        else if (Model.Status == OrderStatus.Delivering && Model.ShipperID == ViewBag.CurrentShipperID)
        {
            <button class="btn btn-success btn-mark-delivered" data-id="@Model.OrderID">
                <i class="fa fa-check-circle"></i> Đã giao
            </button>
        }
    }
    
    @if (!(await AuthorizationService.AuthorizeAsync(User, "OrderManagementAccess")).Succeeded)
    {
        if (Model.Status == OrderStatus.Pending)
        {
            <button class="btn btn-danger btn-cancel-order" data-id="@Model.OrderID">
                <i class="fa fa-times"></i> Hủy đơn
            </button>
        }
    }
</div>

<partial name="_CancelModalPartial" />

@section Scripts {
    @Html.AntiForgeryToken()
    <script>
        $(document).ready(function() {
            // Handle Accept Order button (Employee)
            $(".btn-accept-order").click(function() {
                var orderID = $(this).data("id");
                var token = $('input[name="__RequestVerificationToken"]').val();
                
                if (confirm("Bạn muốn nhận đơn hàng #" + orderID + "?")) {
                    $.ajax({
                        url: '@Url.Action("AcceptOrder")',
                        type: 'POST',
                        data: { 
                            orderID: orderID,
                            __RequestVerificationToken: token
                        },
                        success: function(result) {
                            if (result.success) {
                                alert(result.message);
                                location.reload();
                            } else {
                                alert(result.message);
                            }
                        },
                        error: function() {
                            alert("Có lỗi xảy ra. Vui lòng thử lại sau!");
                        }
                    });
                }
            });
            
            // Handle Mark as Prepared button (Employee)
            $(".btn-mark-prepared").click(function() {
                var orderID = $(this).data("id");
                var token = $('input[name="__RequestVerificationToken"]').val();
                
                if (confirm("Xác nhận đơn hàng #" + orderID + " đã được chuẩn bị xong?")) {
                    $.ajax({
                        url: '@Url.Action("MarkAsPrepared")',
                        type: 'POST',
                        data: {
                            orderID: orderID,
                            __RequestVerificationToken: token
                        },
                        success: function(result) {
                            if (result.success) {
                                alert(result.message);
                                location.reload();
                            } else {
                                alert(result.message);
                            }
                        },
                        error: function() {
                            alert("Có lỗi xảy ra. Vui lòng thử lại sau!");
                        }
                    });
                }
            });
            
            // Handle Accept Delivery button (Shipper)
            $(".btn-accept-delivery").click(function() {
                var orderID = $(this).data("id");
                var token = $('input[name="__RequestVerificationToken"]').val();
                
                if (confirm("Bạn muốn nhận giao đơn hàng #" + orderID + "?")) {
                    $.ajax({
                        url: '@Url.Action("AcceptDelivery")',
                        type: 'POST',
                        data: {
                            orderID: orderID,
                            __RequestVerificationToken: token
                        },
                        success: function(result) {
                            if (result.success) {
                                alert(result.message);
                                location.reload();
                            } else {
                                alert(result.message);
                            }
                        },
                        error: function() {
                            alert("Có lỗi xảy ra. Vui lòng thử lại sau!");
                        }
                    });
                }
            });
            
            // Handle Mark as Delivered button (Shipper)
            $(".btn-mark-delivered").click(function() {
                var orderID = $(this).data("id");
                var token = $('input[name="__RequestVerificationToken"]').val();
                
                if (confirm("Xác nhận đơn hàng #" + orderID + " đã được giao thành công?")) {
                    $.ajax({
                        url: '@Url.Action("MarkAsDelivered")',
                        type: 'POST',
                        data: { 
                            orderID: orderID,
                            __RequestVerificationToken: token
                        },
                        success: function(result) {
                            if (result.success) {
                                alert(result.message);
                                location.reload();
                            } else {
                                alert(result.message);
                            }
                        },
                        error: function() {
                            alert("Có lỗi xảy ra. Vui lòng thử lại sau!");
                        }
                    });
                }
            });

            // Handle Cancel Order button - show modal
            $(".btn-cancel-order").click(function() {
                var orderID = $(this).data("id");
                $("#cancelOrderId").text(orderID);
                $("#cancellationReason").val("");
                $("#cancelOrderModal").modal('show');
            });

            // Handle Confirm Cancel Order button in modal
            $("#confirmCancelOrder").click(function() {
                var orderID = $("#cancelOrderId").text();
                var reason = $("#cancellationReason").val();
                var token = $('input[name="__RequestVerificationToken"]').val();

                if (!reason.trim()) {
                    alert("Vui lòng nhập lý do hủy đơn hàng!");
                    return;
                }

                $.ajax({
                    url: '@Url.Action("Cancel")',
                    type: 'POST',
                    data: {
                        orderID: orderID,
                        note: reason,
                        __RequestVerificationToken: token
                    },
                    success: function(result) {
                        if (result.success) {
                            alert(result.message);
                            $("#cancelOrderModal").modal('hide');
                            location.reload();
                        } else {
                            alert(result.message);
                        }
                    },
                    error: function() {
                        alert("Có lỗi xảy ra. Vui lòng thử lại sau!");
                    }
                });
            });
        });
    </script>
}

@functions {
    string GetStatusBadgeClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "bg-secondary",
            OrderStatus.Processing => "bg-info",
            OrderStatus.Prepared => "bg-primary", 
            OrderStatus.Delivering => "bg-warning",
            OrderStatus.Completed => "bg-success",
            OrderStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }
    
    string GetStatusDisplayName(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "Chờ xác nhận",
            OrderStatus.Processing => "Đang chế biến",
            OrderStatus.Prepared => "Sẵn sàng giao",
            OrderStatus.Delivering => "Đang giao hàng",
            OrderStatus.Completed => "Hoàn thành",
            OrderStatus.Cancelled => "Đã hủy",
            _ => status.ToString()
        };
    }
    
    string GetShippingMethodDisplayName(ShippingMethod method)
    {
        return method switch
        {
            ShippingMethod.Express => "Ưu tiên (< 20 phút)",
            ShippingMethod.Fast => "Nhanh (15 phút)",
            ShippingMethod.Economy => "Tiết kiệm (30 phút)",
            _ => method.ToString()
        };
    }
}
